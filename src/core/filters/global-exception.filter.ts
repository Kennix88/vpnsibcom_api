import { LoggerTelegramService } from '@core/logger/logger-telegram.service'
import {
  ArgumentsHost,
  Catch,
  ExceptionFilter,
  HttpException,
  Logger,
} from '@nestjs/common'

@Catch()
export class GlobalExceptionFilter implements ExceptionFilter {
  private readonly logger = new Logger(GlobalExceptionFilter.name)

  constructor(private readonly telegramLogger: LoggerTelegramService) {}

  async catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp()
    const response = ctx.getResponse()
    const request = ctx.getRequest()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let status = 500
    let message = 'Internal server error'

    if (exception instanceof HttpException) {
      status = exception.getStatus()
      message = exception.message
    } else if (exception instanceof Error) {
      message = exception.message
    }

    // –õ–æ–∫–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ Pino
    this.logger.error(message, (exception as Error)?.stack)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –ø–æ–¥–ø-—á–∞—Ç –¥–ª—è –æ—à–∏–±–æ–∫
    await this.telegramLogger.error(`üö® [${status}] ${message}`)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    if (response && typeof response.status === 'function') {
      try {
        const responseObj = response.status(status)
        if (responseObj && typeof responseObj.json === 'function') {
          responseObj.json({ statusCode: status, message })
        } else if (typeof response.send === 'function') {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
          response.send({ statusCode: status, message })
        }
      } catch (err) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${err.message}`)
      }
    }
  }
}

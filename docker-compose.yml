services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=${NODE_ENV}
      - SEED_MOD=${SEED_MOD}
      - APPLICATION_PORT=${APPLICATION_PORT}
      - APPLICATION_URL=${APPLICATION_URL}
      - ALLOWED_ORIGIN=${ALLOWED_ORIGIN}
      - TMA_URL=${TMA_URL}
      - WEBAPP_URL=${WEBAPP_URL}
      - BOT_URL=${BOT_URL}
      - CHANNEL_URL=${CHANNEL_URL}
      - CHAT_URL=${CHAT_URL}
      - KENNIXDEV_URL=${KENNIXDEV_URL}
      - OPENSOURCE_URL=${OPENSOURCE_URL}
      - DOMAIN=${DOMAIN}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ACCESS_TOKEN_EXPIRY=${ACCESS_TOKEN_EXPIRY}
      - REFRESH_TOKEN_EXPIRY=${REFRESH_TOKEN_EXPIRY}
      - COOKIES_SECRET=${COOKIES_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_NAME=${SESSION_NAME}
      - SESSION_DOMAIN=${SESSION_DOMAIN}
      - SESSION_MAX_AGE=${SESSION_MAX_AGE}
      - SESSION_HTTP_ONLY=${SESSION_HTTP_ONLY}
      - SESSION_SECURE=${SESSION_SECURE}
      - SESSION_FOLDER=${SESSION_FOLDER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_URL=redis://${REDIS_USER}:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}
      - TELEGRAM_ADMIN_ID=${TELEGRAM_ADMIN_ID}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_LOG_CHAT_ID=${TELEGRAM_LOG_CHAT_ID}
      - TELEGRAM_THREAD_ID_DEBUG=${TELEGRAM_THREAD_ID_DEBUG}
      - TELEGRAM_THREAD_ID_INFO=${TELEGRAM_THREAD_ID_INFO}
      - TELEGRAM_THREAD_ID_WARN=${TELEGRAM_THREAD_ID_WARN}
      - TELEGRAM_THREAD_ID_ERROR=${TELEGRAM_THREAD_ID_ERROR}
      - TELEGRAM_THREAD_ID_PAYMENTS=${TELEGRAM_THREAD_ID_PAYMENTS}
      - TELEGRAM_THREAD_ID_SUBSCRIPTIONS=${TELEGRAM_THREAD_ID_SUBSCRIPTIONS}
      - TELEGRAM_THREAD_ID_USERS=${TELEGRAM_THREAD_ID_USERS}
      - TELEGRAM_THREAD_ID_BACKUPS=${TELEGRAM_THREAD_ID_BACKUPS}
      - XRAY_MARZBAN_URL=${XRAY_MARZBAN_URL}
      - XRAY_MARZBAN_LOGIN=${XRAY_MARZBAN_LOGIN}
      - XRAY_MARZBAN_PASSWORD=${XRAY_MARZBAN_PASSWORD}
      - COINMARKETCAP_TOKEN=${COINMARKETCAP_TOKEN}
      - COINMARKETCAP_URL=${COINMARKETCAP_URL}
      - FOREXRATEAPI_URL=${FOREXRATEAPI_URL}
      - FOREXRATEAPI_TOKEN=${FOREXRATEAPI_TOKEN}
      - CRYPTOMUS_MERCHANT=${CRYPTOMUS_MERCHANT}
      - CRYPTOMUS_TOKEN=${CRYPTOMUS_TOKEN}
      - CRYPTOMUS_URL=${CRYPTOMUS_URL}
      - PAYPALYCH_ID=${PAYPALYCH_ID}
      - PAYPALYCH_TOKEN=${PAYPALYCH_TOKEN}
      - PAYPALYCH_URL=${PAYPALYCH_URL}
    volumes:
      - api_logs:/app/logs
    networks:
      - token-backend
    expose:
      - '4000'
    ports:
      - '4000:4000'
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true

  frontend:
    container_name: frontend
    build:
      context: ${WEB_PATH} # ⚠️ путь к фронту, укажи точно
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_API_PORT=${NEXT_PUBLIC_API_PORT}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT}
      - NEXT_PUBLIC_TELEGRAM_KENNIXDEV_URL=${NEXT_PUBLIC_TELEGRAM_KENNIXDEV_URL}
      - NEXT_PUBLIC_TELEGRAM_CHANNEL_URL=${NEXT_PUBLIC_TELEGRAM_CHANNEL_URL}
      - NEXT_PUBLIC_TELEGRAM_CHAT_URL=${NEXT_PUBLIC_TELEGRAM_CHAT_URL}
      - NEXT_PUBLIC_GITHUBREPO_URL=${NEXT_PUBLIC_GITHUBREPO_URL}
      - NEXT_PUBLIC_TON_CONNECT_MANIFEST_URL=${NEXT_PUBLIC_TON_CONNECT_MANIFEST_URL}
      - NEXT_PUBLIC_SPLIT_TG_REF_URL=${NEXT_PUBLIC_SPLIT_TG_REF_URL}
      - NEXT_PUBLIC_BOT_URL=${NEXT_PUBLIC_BOT_URL}
    networks:
      - token-backend
    expose:
      - '3000'
    ports:
      - '3000:3000'
    tty: true
    stdin_open: true

  db:
    container_name: postgres
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - token-backend
    expose:
      - '5432'
    ports:
      - '5432:5432'
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}']
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true
    command: postgres -c idle_in_transaction_session_timeout=0 -c statement_timeout=0

  redis:
    container_name: redis
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      sh -c '
      mkdir -p /usr/local/etc/redis &&
      echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
      echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
      echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
      echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
      echo "timeout 0" >> /usr/local/etc/redis/redis.conf &&
      echo "tcp-keepalive 60" >> /usr/local/etc/redis/redis.conf &&
      echo "maxclients 10000" >> /usr/local/etc/redis/redis.conf &&
      redis-server /usr/local/etc/redis/redis.conf
      '
    volumes:
      - redis_data:/data
    networks:
      - token-backend
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '$REDIS_PASSWORD', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - token-backend
    expose:
      - '5000'
    ports:
      - '5000:3000' # Внутри контейнера 3000, наружу — 5000
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:5000/api/health']
      interval: 30s
      timeout: 10s
      retries: 5
    tty: true
    stdin_open: true

  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./prometheus/marzban_targets.yml:/etc/prometheus/marzban_targets.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   networks:
  #     - token-backend
  #   expose:
  #     - '9090'
  #   healthcheck:
  #     test: ['CMD', 'wget', '-qO-', 'http://localhost:9090/-/healthy']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   tty: true
  #   stdin_open: true

  caddy:
    container_name: caddy
    image: caddy:latest
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '443:443/udp'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./caddy_logs:/var/log/caddy
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - token-backend
    environment:
      - CADDY_DISABLE_HTTP_CHALLENGE=true
      - ACME_AGREE=true
      - ACME_EMAIL=shel.live@yandex.ru
    depends_on:
      - api
      # - frontend
      - grafana
      # - prometheus
      - xray-checker
      - uptime-kuma
    healthcheck:
      test: ['CMD', 'caddy', 'validate', '--config', '/etc/caddy/Caddyfile']
      interval: 30s
      timeout: 5s
      retries: 3
    sysctls:
      - net.core.somaxconn=1024

  xray-checker:
    container_name: xray-checker
    image: kutovoys/xray-checker
    restart: unless-stopped
    environment:
      - SUBSCRIPTION_URL=${XRAY_CHECHER_SUBSCRIPTION_URL}
      - METRICS_PROTECTED=true
      - METRICS_USERNAME=${XRAY_CHECHER_USERNAME}
      - METRICS_PASSWORD=${XRAY_CHECHER_PASSWORD}
    ports:
      - '2112:2112'
    networks:
      - token-backend

  # postgres_exporter:
  #   image: prometheuscommunity/postgres-exporter
  #   container_name: postgres_exporter
  #   restart: unless-stopped
  #   environment:
  #     DATA_SOURCE_NAME: 'postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DATABASE}?sslmode=disable'
  #   networks:
  #     - token-backend
  #   ports:
  #     - '9187:9187'

  # redis_exporter:
  #   image: oliver006/redis_exporter
  #   container_name: redis_exporter
  #   restart: unless-stopped
  #   command: --redis.addr=redis://redis:6379 --redis.password=${REDIS_PASSWORD}
  #   networks:
  #     - token-backend
  #   ports:
  #     - '9121:9121'

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   container_name: cadvisor
  #   restart: unless-stopped
  #   ports:
  #     - '8080:8080'
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   networks:
  #     - token-backend

  # node_exporter:
  #   image: prom/node-exporter
  #   container_name: node_exporter
  #   restart: unless-stopped
  #   ports:
  #     - '9100:9100'
  #   networks:
  #     - token-backend

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - '8082:3001'
    networks:
      - token-backend
    volumes:
      - uptime-kuma-data:/app/data
    environment:
      - TZ=Etc/UTC
      - UM_USERNAME=${UM_USERNAME}
      - UM_PASSWORD=${UM_PASSWORD}

  watchdog:
    image: docker:24-cli
    container_name: watchdog
    restart: unless-stopped
    depends_on:
      - api
      - db
      - redis
      - uptime-kuma
      - xray-checker
      - caddy
      - grafana
      - frontend
    environment:
      WATCH_SERVICES: 'api db redis uptime-kuma xray-checker caddy grafana frontend'
      CHECK_INTERVAL: 15
      COOLDOWN: 60
      MAX_RESTARTS_WINDOW: 5
      WINDOW_SEC: 300
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/watchdog/watchdog.sh:/usr/local/bin/watchdog.sh:ro
    networks:
      - token-backend
    entrypoint: ['/bin/sh', '/usr/local/bin/watchdog.sh']

networks:
  token-backend:
    driver: bridge
    name: token-backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  grafana_data:
    driver: local
  # prometheus_data:
  #   driver: local
  uptime-kuma-data:
    driver: local

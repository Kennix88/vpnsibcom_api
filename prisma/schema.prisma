generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum DefaultEnum {
  DEFAULT
}

model Settings {
  key                              DefaultEnum @id @default(DEFAULT)
  tgStarsToUSD                     Float       @default(0.013) @map("tg_stars_to_usd")
  priceSubscriptionStars           Int         @default(699) @map("price_subscription_stars")
  commissionStarsToTon             Float       @default(0.90) @map("commission_stars_to_ton")
  adsRewardStars                   Float       @default(0.1) @map("ads_reward_stars")
  adsTaskRewardStars               Float       @default(10) @map("ads_task_reward_stars")
  hourRatioPayment                 Float       @default(1.39) @map("hour_ratio_payment")
  dayRatioPayment                  Float       @default(1.31) @map("day_ratio_payment")
  threeMouthesRatioPayment         Float       @default(0.97) @map("three_mouthes_ratio_payment")
  sixMouthesRatioPayment           Float       @default(0.94) @map("six_mouthes_ratio_payment")
  oneYearRatioPayment              Float       @default(0.88) @map("one_year_ratio_payment")
  twoYearRatioPayment              Float       @default(0.76) @map("two_year_ratio_payment")
  threeYearRatioPayment            Float       @default(0.64) @map("three_year_ratio_payment")
  referralOneLevelPercent          Float       @default(0.1) @map("referral_one_level_percent")
  referralTwoLevelPercent          Float       @default(0.05) @map("referral_two_level_percent")
  referralThreeLevelPercent        Float       @default(0.01) @map("referral_three_level_percent")
  referralInviteRewardStars        Float       @default(10) @map("referral_invite_reward_stars")
  referralInvitePremiumRewardStars Float       @default(50) @map("referral_invite_premiumreward_stars")
  limitDevices                     Int         @default(10) @map("limit_devices")
  freePlanDays                     Int         @default(7) @map("free_plan_days")
  freePlanDaysForReferrals         Int         @default(14) @map("free_plan_days_for_referrals")

  @@map("settings")
}

model UserTelegramData {
  id                    String   @id @default(uuid())
  isLive                Boolean  @default(false) @map("is_live")
  isRtl                 Boolean  @default(false) @map("is_rtl")
  isPremium             Boolean  @default(false) @map("is_premium")
  isBot                 Boolean  @default(false) @map("is_bot")
  firstName             String   @map("first_name")
  lastName              String?  @map("last_name")
  username              String?
  languageCode          String   @map("language_code")
  photoUrl              String?  @map("photo_url")
  addedToAttachmentMenu Boolean  @default(false) @map("added_to_attachment_menu")
  allowsWriteToPm       Boolean  @default(false) @map("allows_write_to_pm")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user Users?

  @@map("user_telegram_data")
}

model Referrals {
  id                       String  @id @default(uuid())
  level                    Int     @default(1)
  inviter                  Users   @relation("inviter", fields: [inviterId], references: [id])
  inviterId                String  @map("inviter_id")
  referral                 Users   @relation("referral", fields: [referralId], references: [id])
  referralId               String  @map("referral_id")
  totalPaymentsRewarded    Float   @default(0)
  totalWithdrawalsRewarded Float   @default(0)
  isActivated              Boolean @default(false)
  isPremium                Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("referrals")
}

model Users {
  id                  String  @id @default(uuid())
  telegramId          String  @unique @map("telegram_id")
  tonWallet           String? @unique @map("ton_wallet")
  isFreePlanAvailable Boolean @default(true) @map("is_free_plan_available")
  isBanned            Boolean @default(false) @map("is_banned")
  isDeleted           Boolean @default(false) @map("is_deleted")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastStartedAt DateTime? @map("last_started_at")
  banExpiredAt  DateTime? @map("banned_expired_at")
  deletedAt     DateTime? @map("deleted_at")

  role                      Roles               @relation(fields: [roleId], references: [key])
  roleId                    UserRoleEnum        @default(USER) @map("role_id")
  payments                  Payments[]
  referrals                 Referrals[]         @relation("inviter")
  inviters                  Referrals[]         @relation("referral")
  telegramData              UserTelegramData?   @relation(fields: [telegramDataId], references: [id])
  telegramDataId            String?             @unique @map("telegram_data_id")
  balance                   UserBalance?        @relation(fields: [balanceId], references: [id])
  balanceId                 String?             @unique @map("balance_id")
  language                  Language            @relation(fields: [languageId], references: [id])
  languageId                String              @map("language_id")
  currency                  Currency            @relation(fields: [currencyKey], references: [key])
  currencyKey               CurrencyEnum        @default(USD) @map("currency_key")
  subscriptions             Subscriptions[]
  giftSubscriptions         GiftSubscriptions[]
  activateGiftSubscriptions GiftSubscriptions[] @relation("activateUser")
  withdrawals               Withdrawals[]
  adsViews                  AdsViews[]

  @@map("users")
}

model AdsViews {
  id         String          @id @default(uuid())
  network    AdsNetworks     @relation(fields: [networkKey], references: [key])
  networkKey AdsNetworkEnum  @default(ADSGRAM) @map("network_key")
  type       AdsViewTypeEnum @default(REWARD)
  createdAt  DateTime        @default(now()) @map("created_at")

  user   Users  @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("ads_views")
}

model AdsNetworks {
  key      AdsNetworkEnum @id
  isActive Boolean        @map("is_active")
  name     String
  adsViews AdsViews[]

  @@map("ads_networks")
}

enum AdsNetworkEnum {
  YANDEX
  ADSGRAM
  ONCLICKA
  ADSONAR
  GIGA
  MONETAG
}

enum AdsViewTypeEnum {
  REWARD
  TASK
  VIEW
}

model UserBalance {
  id                           String         @id @default(uuid())
  paymentBalance               Float          @default(0) @map("payment_balance")
  holdBalance                  Float          @default(0) @map("hold_balance")
  totalEarnedWithdrawalBalance Float          @default(0) @map("total_earned_withdrawal_balance")
  withdrawalBalance            Float          @default(0) @map("withdrawal_balance")
  isUseWithdrawalBalance       Boolean        @default(true) @map("is_use_withdrawal_balance")
  updatedAt                    DateTime       @updatedAt @map("updated_at")
  user                         Users?
  transactions                 Transactions[]

  @@map("user_balance")
}

model GiftSubscriptions {
  id       String                 @id @default(uuid())
  period   SubscriptionPeriodEnum @default(MONTH)
  isActive Boolean                @default(false) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user           Users      @relation(fields: [userId], references: [id])
  userId         String     @unique @map("user_id")
  activateUser   Users?     @relation("activateUser", fields: [activateUserId], references: [id])
  activateUserId String?    @unique @map("activate_user_id")
  payments       Payments[]

  @@map("gift_subscriptions")
}

model GreenList {
  green String @id

  @@map("green_list")
}

model Subscriptions {
  id            String                 @id @default(uuid())
  username      String                 @unique
  isActive      Boolean                @default(false) @map("is_active")
  isAutoRenewal Boolean                @default(true) @map("is_auto_renewal")
  token         String                 @unique @map("token")
  period        SubscriptionPeriodEnum @default(MONTH)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiredAt DateTime? @map("expired_at")

  user     Users      @relation(fields: [userId], references: [id])
  userId   String     @unique @map("user_id")
  payments Payments[]

  @@map("subscriptions")
}

enum SubscriptionPeriodEnum {
  TRIAL
  HOUR
  DAY
  MONTH
  THREE_MONTH
  SIX_MONTH
  YEAR
  TWO_YEAR
  THREE_YEAR
}

model Roles {
  key                UserRoleEnum @id
  name               String
  discount           Float        @default(1)
  limitSubscriptions Int          @default(10) @map("limit_subscriptions")

  users Users[]

  @@map("roles")
}

enum UserRoleEnum {
  SUPER_ADMIN
  ADMIN
  FRIEND
  OLD_USER
  USER
}

model Language {
  id         String @id @default(uuid())
  name       String
  nativeName String @map("native_name")
  iso6391    String @unique @map("iso_639_1")
  iso6392    String @unique @map("iso_639_2")
  iso6393    String @unique @map("iso_639_3")

  users Users[]

  @@map("language")
}

model Currency {
  key               CurrencyEnum     @id
  name              String
  symbol            String
  type              CurrencyTypeEnum @default(FIAT)
  rate              Float            @default(1)
  coinmarketcapUCID String?          @unique @map("coinmarketcap_ucid")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  payments       Payments[]
  paymentMethods PaymentMethods[]
  users          Users[]

  @@map("currency")
}

enum CurrencyTypeEnum {
  FIAT
  CRYPTO
  TELEGRAM
}

enum CurrencyEnum {
  RUB
  USD
  EUR
  KZT
  AED
  ARS
  AUD
  AZN
  AMD
  BDT
  BYN
  BGN
  BHD
  BOB
  BRL
  CAD
  CHF
  CNY
  COP
  CZK
  DKK
  EGP
  GBP
  HKD
  HUF
  INR
  IDR
  JPY
  KES
  KWD
  MAD
  MNT
  MXN
  NGN
  NZD
  OMR
  PEN
  PHP
  PKR
  PLN
  QAR
  RON
  SAR
  SEK
  THB
  TRY
  TWD
  UAH
  UGX
  VND
  ZAR
  GEL
  KGS
  MDL
  NOK
  XDR
  SGD
  TJS
  TMT
  UZS
  RSD
  KRW
  TON
  MAJOR
  NOT
  HMSTR
  DOGS
  CATI
  USDT
  XTR
  JETTON
  PX
  GRAM
  CATS
}

model Transactions {
  id            String                @id @default(uuid())
  amount        Float                 @default(0)
  isHold        Boolean               @default(false) @map("is_hold")
  type          TransactionTypeEnum   @default(PLUS)
  reason        TransactionReasonEnum @default(PAYMENT)
  balanceType   BalanceTypeEnum       @default(PAYMENT) @map("balance_type")
  createdAt     DateTime              @default(now()) @map("created_at")
  updatedAt     DateTime              @updatedAt @map("updated_at")
  holdExpiredAt DateTime?             @map("hold_expired_at")

  balance    UserBalance  @relation(fields: [balanceId], references: [id])
  balanceId  String       @map("balance_id")
  withdrawal Withdrawals?
  payment    Payments?

  @@map("transactions")
}

enum TransactionTypeEnum {
  PLUS
  MINUS
}

enum BalanceTypeEnum {
  PAYMENT
  WITHDRAWAL
}

enum TransactionReasonEnum {
  WITHDRAWAL
  GIFT_SUBSCRIPTIONS
  SUBSCRIPTIONS
  PAYMENT
  REWARD
  REFERRAL
  FINE
}

model Withdrawals {
  id          String               @id @default(uuid())
  status      WithdrawalStatusEnum @default(CONSIDERATION)
  amountStars Float                @default(0) @map("amount_stars")
  amountUSD   Float                @default(0) @map("amount_usd")
  amountTON   Float                @default(0) @map("amount_ton")
  commission  Float                @default(1)
  address     String
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  user          Users        @relation(fields: [userId], references: [id])
  userId        String       @map("user_id")
  transacrion   Transactions @relation(fields: [transactionId], references: [id])
  transactionId String       @unique @map("transaction_id")

  @@map("withdrawals")
}

enum WithdrawalStatusEnum {
  CONSIDERATION
  REJECTED
  SENT
  EXPIRED
}

model Payments {
  id           String            @id @default(uuid())
  status       PaymentStatusEnum @default(PENDING)
  amount       Float             @default(0)
  amountStars  Float             @default(0) @map("amount_stars")
  exchangeRate Float             @default(0) @map("exchange_rate")
  commission   Float             @default(1)
  token        String            @unique
  linkPay      String?           @map("link_pay")
  details      Json?             @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user                Users              @relation(fields: [userId], references: [id])
  userId              String             @map("user_id")
  currency            Currency           @relation(fields: [currencyKey], references: [key])
  currencyKey         CurrencyEnum       @map("currency_key")
  subscription        Subscriptions?     @relation(fields: [subscriptionId], references: [id])
  subscriptionId      String?            @map("subscription_id")
  giftSubscriptions   GiftSubscriptions? @relation(fields: [giftSubscriptionsId], references: [id])
  giftSubscriptionsId String?            @map("gift_subscriptions_id")
  method              PaymentMethods     @relation(fields: [methodKey], references: [key])
  methodKey           PaymentMethodEnum  @map("method_key")
  transacrion         Transactions?      @relation(fields: [transactionId], references: [id])
  transactionId       String?            @unique @map("transaction_id")

  @@map("payments")
}

enum PaymentStatusEnum {
  PENDING
  COMPLETED
  CANCELED
  FAILED
}

model PaymentMethods {
  key                     PaymentMethodEnum     @id
  name                    String
  isActive                Boolean               @default(false) @map("is_active")
  isTonBlockchain         Boolean               @default(false) @map("is_ton_blockchain")
  tonSmartContractAddress String?               @unique @map("ton_smart_contract_address")
  minAmount               Float                 @default(0) @map("min_amount")
  maxAmount               Float                 @default(10000) @map("max_amount")
  commission              Float                 @default(1)
  isPlusCommission        Boolean               @default(false) @map("is_plus_commission")
  type                    PaymentMethodTypeEnum @default(CARD)
  system                  PaymentSystemEnum     @default(TELEGRAM)

  payments    Payments[]
  currency    Currency     @relation(fields: [currencyKey], references: [key])
  currencyKey CurrencyEnum @map("currency_key")

  @@map("payment_methods")
}

enum PaymentSystemEnum {
  PAYEER
  VOLET
  WATA
  TOME
  TELEGRAM
  CRYPTOMUS
  CRYPTOBOT
  TON_BLOCKCHAIN
  PAYPALYCH
  SKINSBACK
}

enum PaymentMethodTypeEnum {
  CRYPTOCURRENCY
  CARD
  SBP
  STARS
  WALLET
  SKINS
}

enum PaymentMethodEnum {
  STARS
  TOME_CARD
  TOME_SBP
  PAYPALYCH_RUB
  PAYPALYCH_SBP
  PAYPALYCH_USD
  PAYPALYCH_EUR
  WATA_RUB
  WATA_USD
  WATA_EUR
  PAYEER_RUB
  PAYEER_USD
  PAYEER_EUR
  VOLET_RUB
  VOLET_USD
  VOLET_EUR
  CRYPTOMUS
  CRYPTOBOT
  XROCKET
  TON_TON
  USDT_TON
  NOT_TON
  MAJOR_TON
  HMSTR_TON
  DOGS_TON
  CATI_TON
  JETTON_TON
  PX_TON
  GRAM_TON
  CATS_TON
  SKINSBACK
}
